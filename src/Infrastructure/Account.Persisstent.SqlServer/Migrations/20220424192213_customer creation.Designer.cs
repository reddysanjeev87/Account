// <auto-generated />
using System;
using Account.Persisstent.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Account.Persisstent.SqlServer.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20220424192213_customer creation")]
    partial class customercreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Account.Domain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BankAccountIBAN")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankAccountSortCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BankAccountSwiftCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreditTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerPriceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAdress1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DeliveryAdress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DeliveryCity")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("DeliveryCountryId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryCounty")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DeliveryPostCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("DeliveryProvinceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryRegionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryStateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InvoiceAdress1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("InvoiceAdress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("InvoiceCity")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("InvoiceCountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("InvoiceCounty")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("InvoiceLedgerAccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("InvoicePostCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("InvoiceProvinceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceRegionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceStateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("InvoiceVatNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsCreditLimitEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCreditTermEnabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSameAsInvoiceAddress")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPriceTypeId");

                    b.HasIndex("DeliveryCountryId");

                    b.HasIndex("DeliveryProvinceId");

                    b.HasIndex("DeliveryRegionId");

                    b.HasIndex("DeliveryStateId");

                    b.HasIndex("InvoiceCountryId");

                    b.HasIndex("InvoiceLedgerAccountId");

                    b.HasIndex("InvoiceProvinceId");

                    b.HasIndex("InvoiceRegionId");

                    b.HasIndex("InvoiceStateId");

                    b.HasIndex("StatusId");

                    b.ToTable("Customer", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.LedgerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("VatRateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("LedgerAccount", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.LedgerAccountCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("LedgerAccountCategory", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("PriceType", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Region", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("State", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Status", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.VatRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("VatRate", "dbo");
                });

            modelBuilder.Entity("Account.Domain.Model.Customer", b =>
                {
                    b.HasOne("Account.Domain.Model.PriceType", "PriceType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerPriceTypeId");

                    b.HasOne("Account.Domain.Model.Country", "DeliveryCountry")
                        .WithMany("DeliveryCustomers")
                        .HasForeignKey("DeliveryCountryId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Province", "DeliveryProvince")
                        .WithMany("DeliveryCustomers")
                        .HasForeignKey("DeliveryProvinceId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Region", "DeliveryRegion")
                        .WithMany("DeliveryCustomers")
                        .HasForeignKey("DeliveryRegionId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.State", "DeliveryState")
                        .WithMany("DeliveryCustomers")
                        .HasForeignKey("DeliveryStateId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Country", "InvoiceCountry")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("InvoiceCountryId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.LedgerAccount", "InvoiceLedgerAccount")
                        .WithMany("Customers")
                        .HasForeignKey("InvoiceLedgerAccountId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Province", "InvoiceProvince")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("InvoiceProvinceId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Region", "InvoiceRegion")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("InvoiceRegionId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.State", "InvoiceState")
                        .WithMany("InvoiceCustomers")
                        .HasForeignKey("InvoiceStateId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Status", "Status")
                        .WithMany("Customers")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("DeliveryCountry");

                    b.Navigation("DeliveryProvince");

                    b.Navigation("DeliveryRegion");

                    b.Navigation("DeliveryState");

                    b.Navigation("InvoiceCountry");

                    b.Navigation("InvoiceLedgerAccount");

                    b.Navigation("InvoiceProvince");

                    b.Navigation("InvoiceRegion");

                    b.Navigation("InvoiceState");

                    b.Navigation("PriceType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Account.Domain.Model.LedgerAccount", b =>
                {
                    b.HasOne("Account.Domain.Model.LedgerAccountCategory", "LedgerAccountCategory")
                        .WithMany("LedgerAccounts")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.HasOne("Account.Domain.Model.Status", "Status")
                        .WithMany("LedgerAccounts")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("LedgerAccountCategory");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Account.Domain.Model.LedgerAccountCategory", b =>
                {
                    b.HasOne("Account.Domain.Model.Status", "Status")
                        .WithMany("LedgerAccountCategories")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Account.Domain.Model.PriceType", b =>
                {
                    b.HasOne("Account.Domain.Model.Status", "Status")
                        .WithMany("PriceTypes")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Account.Domain.Model.VatRate", b =>
                {
                    b.HasOne("Account.Domain.Model.Status", "Status")
                        .WithMany("VatRates")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Account.Domain.Model.Country", b =>
                {
                    b.Navigation("DeliveryCustomers");

                    b.Navigation("InvoiceCustomers");
                });

            modelBuilder.Entity("Account.Domain.Model.LedgerAccount", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Account.Domain.Model.LedgerAccountCategory", b =>
                {
                    b.Navigation("LedgerAccounts");
                });

            modelBuilder.Entity("Account.Domain.Model.PriceType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Account.Domain.Model.Province", b =>
                {
                    b.Navigation("DeliveryCustomers");

                    b.Navigation("InvoiceCustomers");
                });

            modelBuilder.Entity("Account.Domain.Model.Region", b =>
                {
                    b.Navigation("DeliveryCustomers");

                    b.Navigation("InvoiceCustomers");
                });

            modelBuilder.Entity("Account.Domain.Model.State", b =>
                {
                    b.Navigation("DeliveryCustomers");

                    b.Navigation("InvoiceCustomers");
                });

            modelBuilder.Entity("Account.Domain.Model.Status", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("LedgerAccountCategories");

                    b.Navigation("LedgerAccounts");

                    b.Navigation("PriceTypes");

                    b.Navigation("VatRates");
                });
#pragma warning restore 612, 618
        }
    }
}
